services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    env_file: .env
    environment:
      # Keep SQLite inside the container for now (avoids Windows bind-mount perms)
      DATABASE_URL: sqlite+aiosqlite:////tmp/app.db
      ALEMBIC_DATABASE_URL: sqlite:////tmp/dev_migrations.db
    command: >
      sh -lc "
      /opt/venv/bin/python -V &&
      /opt/venv/bin/python -m pip show uvicorn || true &&
      /opt/venv/bin/python -c 'import fastapi,uvicorn; print(\"fastapi OK\", fastapi.__version__, \"uvicorn\", uvicorn.__version__)' &&
      /opt/venv/bin/python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
      "
    ports:
      - "8000:8000"
    volumes:
      - .:/myapp
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-myappdb}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-myappdb}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 12
    networks:
      - app-network

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${S3_ACCESS_KEY:-minioadmin} ${S3_SECRET_KEY:-minioadmin} &&
      mc mb -p local/${S3_BUCKET:-profile-pics} || true &&
      mc anonymous set download local/${S3_BUCKET:-profile-pics} || true
      "
    networks:
      - app-network

networks:
  app-network:

volumes:
  postgres-data:
  minio-data:
